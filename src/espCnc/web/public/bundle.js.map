{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["const CONNECT = document.getElementById(\"connect\");\r\nconst SEND = document.getElementById(\"send\");\r\nconst CODE = document.getElementById(\"code\") as HTMLTextAreaElement;\r\nconst STATUS = document.getElementById(\"status\");\r\n\r\nlet bytes_in_flight = 0;\r\nlet send_queue = \"\";\r\nlet bytes_sent = 0;\r\n\r\nasync function read_task(reader: ReadableStreamDefaultReader<Uint8Array>) {\r\n    const decoder = new TextDecoder();\r\n    while(true) {\r\n        const {value, done} = await reader.read();\r\n        if(done) {\r\n            console.log(\"Reader Done\");\r\n            return;\r\n        }\r\n\r\n        const str_value = decoder.decode(value);\r\n        console.log(str_value);\r\n        for(const c of str_value) {\r\n            if(c == '%') bytes_in_flight -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nasync function write_task(writer: WritableStreamDefaultWriter<Uint8Array>) {\r\n  const encoder = new TextEncoder();\r\n    setInterval(async ()=>{\r\n        STATUS.innerHTML = `${send_queue.length} ${bytes_sent} ${bytes_in_flight}`;\r\n        if(bytes_in_flight < 64 && send_queue.length != 0) {\r\n            const next_chunk = send_queue.slice(0,128);\r\n            send_queue = send_queue.slice(128)\r\n            const val = encoder.encode(next_chunk);\r\n            console.log(next_chunk);\r\n            writer.write(val);\r\n            bytes_in_flight += val.byteLength;\r\n            bytes_sent += val.byteLength;\r\n        }\r\n    });\r\n}\r\n\r\nCONNECT.addEventListener(\"click\", async () => {\r\n  const port = await navigator.serial.requestPort()\r\n  await port.open({baudRate: 460800});\r\n  const writer = await port.writable.getWriter();\r\n  const reader = await port.readable.getReader();\r\n  read_task(reader);\r\n  write_task(writer);\r\n});\r\n\r\nSEND.addEventListener(\"click\", () => {\r\n    send_queue += CODE.value;\r\n});"],
  "mappings": ";;AAAA,MAAM,UAAU,SAAS,eAAe,SAAS;AACjD,MAAM,OAAO,SAAS,eAAe,MAAM;AAC3C,MAAM,OAAO,SAAS,eAAe,MAAM;AAC3C,MAAM,SAAS,SAAS,eAAe,QAAQ;AAE/C,MAAI,kBAAkB;AACtB,MAAI,aAAa;AACjB,MAAI,aAAa;AAEjB,iBAAe,UAAU,QAAiD;AACtE,UAAM,UAAU,IAAI,YAAY;AAChC,WAAM,MAAM;AACR,YAAM,EAAC,OAAO,KAAI,IAAI,MAAM,OAAO,KAAK;AACxC,UAAG,MAAM;AACL,gBAAQ,IAAI,aAAa;AACzB;AAAA,MACJ;AAEA,YAAM,YAAY,QAAQ,OAAO,KAAK;AACtC,cAAQ,IAAI,SAAS;AACrB,iBAAU,KAAK,WAAW;AACtB,YAAG,KAAK,IAAK,oBAAmB;AAAA,MACpC;AAAA,IACJ;AAAA,EACJ;AAEA,iBAAe,WAAW,QAAiD;AACzE,UAAM,UAAU,IAAI,YAAY;AAC9B,gBAAY,YAAU;AAClB,aAAO,YAAY,GAAG,WAAW,MAAM,IAAI,UAAU,IAAI,eAAe;AACxE,UAAG,kBAAkB,MAAM,WAAW,UAAU,GAAG;AAC/C,cAAM,aAAa,WAAW,MAAM,GAAE,GAAG;AACzC,qBAAa,WAAW,MAAM,GAAG;AACjC,cAAM,MAAM,QAAQ,OAAO,UAAU;AACrC,gBAAQ,IAAI,UAAU;AACtB,eAAO,MAAM,GAAG;AAChB,2BAAmB,IAAI;AACvB,sBAAc,IAAI;AAAA,MACtB;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,UAAQ,iBAAiB,SAAS,YAAY;AAC5C,UAAM,OAAO,MAAM,UAAU,OAAO,YAAY;AAChD,UAAM,KAAK,KAAK,EAAC,UAAU,OAAM,CAAC;AAClC,UAAM,SAAS,MAAM,KAAK,SAAS,UAAU;AAC7C,UAAM,SAAS,MAAM,KAAK,SAAS,UAAU;AAC7C,cAAU,MAAM;AAChB,eAAW,MAAM;AAAA,EACnB,CAAC;AAED,OAAK,iBAAiB,SAAS,MAAM;AACjC,kBAAc,KAAK;AAAA,EACvB,CAAC;",
  "names": []
}
