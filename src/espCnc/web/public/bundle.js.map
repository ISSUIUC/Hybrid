{
  "version": 3,
  "sources": ["../src/session.ts", "../src/ui.ts", "../src/main.ts"],
  "sourcesContent": ["export const CMD_TYPES = {\r\n    StopNow: 0,\r\n    StopAll: 1,\r\n    StartAll: 2,\r\n    Enable: 3,\r\n    SetMicrosteps: 4,\r\n    StealthChop: 11,\r\n    CoolStep: 12,\r\n    SetStatus: 13,\r\n    NewTimingReference: 14,\r\n    Timed: 15,\r\n}\r\n\r\nconst MAX_CHUNK = 4096;\r\n\r\nfunction concat(buffs: Uint8Array[]) {\r\n    const len = buffs.reduce((a,b)=>a + b.length, 0);\r\n    const together = new Uint8Array(len)\r\n    let head = 0;\r\n    for(const buff of buffs) {\r\n        together.set(buff, head);\r\n        head += buff.length;\r\n    }\r\n    return together;\r\n}\r\n\r\nexport class MicroCommand{\r\n    index: number = 0;\r\n    constructor(\r\n        public command_type: number,\r\n        public data?: Uint8Array,\r\n    ){}\r\n}\r\n\r\nexport type Command = {\r\n    encode(): MicroCommand[];\r\n}\r\n\r\nexport class EStopCommand implements Command {\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.StopNow)]\r\n    }\r\n}\r\n\r\nexport class StopCommand implements Command {\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.StopAll)];\r\n    }\r\n}\r\n\r\nexport class StartCommand implements Command {\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.StartAll)];\r\n    }\r\n}\r\n\r\nexport class MicrostepsCommand implements Command {\r\n    constructor(public microsteps: [number,number,number,number]){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.SetMicrosteps, new Uint8Array(new Uint16Array(this.microsteps).buffer))];\r\n    }\r\n}\r\n\r\nexport class StealthChopCommand implements Command {\r\n    constructor(public enable: [number,number,number,number]){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.StealthChop, new Uint8Array(this.enable))];\r\n    }\r\n}\r\n\r\nexport class CoolStepCommand implements Command {\r\n    constructor(public enable: [number,number,number,number]){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.CoolStep, new Uint8Array(this.enable))];\r\n    }\r\n}\r\n\r\nexport class EnableCommand implements Command {\r\n    constructor(public enable: [number,number,number,number]){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.Enable, new Uint8Array(this.enable))];\r\n    }\r\n}\r\n\r\nexport class DelayCommand implements Command {\r\n    constructor(public micros: number){}\r\n    encode(): MicroCommand[] {\r\n        return new TimedMoveCommand(new Uint8Array(this.micros)).encode()\r\n    }\r\n}\r\n\r\nclass NewTimingReferenceCommand implements Command {\r\n    constructor(){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.NewTimingReference)];\r\n    }\r\n}\r\n\r\nclass ContinuousTimedSequenceCommand implements Command {\r\n    constructor(public sequence: Uint16Array){\r\n        if(sequence.length > MAX_CHUNK) throw new Error(\"Too big chunk\");\r\n    }\r\n    encode(): MicroCommand[] {\r\n        let buff = new Uint8Array(this.sequence.byteLength + 4);\r\n        let u32 = new Uint32Array(buff.buffer, 0, 1);\r\n        u32[0] = this.sequence.length;\r\n        buff.set(new Uint8Array(this.sequence.buffer, this.sequence.byteOffset, this.sequence.byteLength), 4);\r\n\r\n        return [new MicroCommand(CMD_TYPES.Timed, buff)];\r\n    }\r\n}\r\n\r\nexport class TimedMoveCommand implements Command {\r\n    constructor(public step_sequence: Uint8Array) {}\r\n    private encode_timings(): Uint16Array {\r\n        let last_cmd_index = 0;\r\n        let timing_commands = [];\r\n        for(let i = 0; i < this.step_sequence.length; i++) {\r\n            if(this.step_sequence[i] != 0) {\r\n                timing_commands.push((i - last_cmd_index) | (this.step_sequence[i] << 8));\r\n                last_cmd_index = i;\r\n            }\r\n            if(i - last_cmd_index == 255) {\r\n                timing_commands.push((i - last_cmd_index) | 0x00);\r\n                last_cmd_index = i;\r\n            }   \r\n        }\r\n        timing_commands.push((this.step_sequence.length - last_cmd_index))\r\n        return new Uint16Array(timing_commands);\r\n    }\r\n    encode(): MicroCommand[] {\r\n        let commands = this.encode_timings();\r\n        let parts = [new NewTimingReferenceCommand()];\r\n\r\n        let chunk_ct = Math.ceil(commands.length / MAX_CHUNK);\r\n        for(let i = 0; i < chunk_ct; i++) {\r\n            let chunk = commands.subarray(i * MAX_CHUNK, (i+1)*MAX_CHUNK);\r\n            parts.push(new ContinuousTimedSequenceCommand(chunk))\r\n        }\r\n\r\n        return new MultiCommmand(parts).encode()\r\n    }\r\n}\r\n\r\nexport class MultiCommmand implements Command {\r\n    constructor(public commands: Command[]){}\r\n    encode(): MicroCommand[] {\r\n        return this.commands.flatMap(cmd=>cmd.encode());\r\n    }\r\n}\r\n\r\nexport class SetupCommand implements Command {\r\n    encode(): MicroCommand[] {\r\n        return new MultiCommmand([\r\n            new StartCommand(),\r\n            new MicrostepsCommand([256, 256, 256, 256]),\r\n            new StealthChopCommand([1,1,1,1]),\r\n            new CoolStepCommand([1,1,1,1]),\r\n            new EnableCommand([1,1,1,1]),\r\n        ]).encode()\r\n    }\r\n}\r\n\r\n//x = bit 2\r\n//y = bit 3\r\n//pencil = bit 1\r\nexport class LineCommand implements Command {\r\n    constructor(public dst: [number,number]){}\r\n    encode(): MicroCommand[] {\r\n        //20 cm / rotation\r\n        const mm_per_step = 40 / (256 * 200);\r\n        const step_per_mm = 256 * 200 / 40;\r\n        const max_speed = 200;\r\n        const max_accel = 200;\r\n        \r\n        let major_axis = Math.max(Math.abs(this.dst[0]), Math.abs(this.dst[1]));\r\n        let accel_time = max_speed / max_accel;\r\n        let accel_dist = accel_time**2 * max_accel / 2;\r\n\r\n        let pos = 0;\r\n        let dt = 1e-6;\r\n        \r\n        let steps = []\r\n        let i = 0;\r\n        let dist = 0;\r\n\r\n        let calc_step = (pos,dpos)=>{\r\n            let x_forward = 0x04;\r\n            let x_backward = 0x44;\r\n            let y_forward = 0x08;\r\n            let y_backward = 0x88;\r\n\r\n\r\n            let pos_steps = pos * step_per_mm;\r\n            let next_pos_steps = (pos + dpos) * step_per_mm;\r\n            let step = 0x00;\r\n            if(Math.round(pos_steps * this.dst[0] / major_axis) < Math.round(next_pos_steps * this.dst[0] / major_axis)) {\r\n                step |= x_forward;\r\n                dist += 1;\r\n            }\r\n            if(Math.round(pos_steps * this.dst[0] / major_axis) > Math.round(next_pos_steps * this.dst[0] / major_axis)) {\r\n                step |= x_backward;\r\n                dist -= 1;\r\n            }\r\n            if(Math.round(pos_steps * this.dst[1] / major_axis) < Math.round(next_pos_steps * this.dst[1] / major_axis)) {\r\n                step |= y_forward;\r\n            }\r\n            if(Math.round(pos_steps * this.dst[1] / major_axis) > Math.round(next_pos_steps * this.dst[1] / major_axis)) {\r\n                step |= y_backward;\r\n            }\r\n            return step;\r\n        }\r\n\r\n        for(; pos < major_axis / 2 && pos < accel_dist; i++) {\r\n            let vel = i * dt * max_accel;\r\n            steps.push(calc_step(pos, vel * dt));\r\n            pos += vel * dt;\r\n        }\r\n\r\n        while(pos < major_axis - accel_dist) {\r\n            let vel = i * dt * max_accel;\r\n            steps.push(calc_step(pos, vel * dt));\r\n            pos += vel * dt;\r\n        }\r\n\r\n        for(; pos < major_axis; i--) {\r\n            let vel = i * dt * max_accel;\r\n            steps.push(calc_step(pos, vel * dt));\r\n            pos += vel * dt;\r\n        }\r\n\r\n        return new TimedMoveCommand(new Uint8Array(steps)).encode();\r\n    }\r\n}\r\n\r\nexport class ExecutionSession {\r\n    constructor(){}\r\n    compile_commands(commands: Command[], base_index: number): MicroCommand[] {\r\n        let index = base_index;\r\n        let micro_commands = [];\r\n\r\n        for(const cmd of commands) {\r\n            let micros = cmd.encode();\r\n            for(const micro of micros) {\r\n                micro.index = index;\r\n                micro_commands.push(micro);\r\n            }\r\n            index ++;\r\n        }\r\n\r\n        return micro_commands;\r\n    }\r\n\r\n    serialize_micros(micros: MicroCommand[]): Uint8Array {\r\n        let chunks = [];\r\n        for(const micro of micros) {\r\n            let chunk = new Uint8Array(4 + (micro.data?.length | 0));\r\n            let u16 = new Uint16Array(chunk.buffer);\r\n            u16[0] = micro.command_type;\r\n            u16[1] = micro.index;\r\n            if(micro.data){\r\n                chunk.set(micro.data, 4);\r\n            }\r\n            chunks.push(chunk);\r\n        }\r\n\r\n        return concat(chunks);\r\n    }\r\n}", "import { Command, CoolStepCommand, EnableCommand, EStopCommand, ExecutionSession, LineCommand, MicroCommand, MicrostepsCommand, MultiCommmand, SetupCommand, StartCommand, StealthChopCommand, StopCommand, TimedMoveCommand } from \"./session\";\r\n\r\n\r\nfunction assert_len<T>(arr: Array<T>, len: number) {\r\n    if(arr.length != len) throw new Error(`Bad length (${arr.length} != ${len})`);\r\n}\r\n\r\nfunction parse_command(cmd: string[]) : Command {\r\n    if(cmd[0] == \"start\") {\r\n        assert_len(cmd, 1);\r\n        return new StartCommand();\r\n    } else if(cmd[0] == \"stop\") {\r\n        assert_len(cmd, 1);\r\n        return new StopCommand();\r\n    } else if(cmd[0] == \"enable\") {\r\n        assert_len(cmd, 5);\r\n        let nums = cmd.slice(1).map(Number)\r\n        return new EnableCommand([nums[0], nums[1], nums[2], nums[3]]);\r\n    } else if(cmd[0] == \"micro\" || cmd[0] == \"microsteps\") {\r\n        assert_len(cmd, 5);\r\n        let nums = cmd.slice(1).map(Number)\r\n        return new MicrostepsCommand([nums[0], nums[1], nums[2], nums[3]]);\r\n    } else if(cmd[0] == \"stealth\") {\r\n        assert_len(cmd, 5);\r\n        let nums = cmd.slice(1).map(Number)\r\n        return new StealthChopCommand([nums[0], nums[1], nums[2], nums[3]]);\r\n    } else if(cmd[0] == \"cool\") {\r\n        assert_len(cmd, 5);\r\n        let nums = cmd.slice(1).map(Number)\r\n        return new CoolStepCommand([nums[0], nums[1], nums[2], nums[3]]);\r\n    } else if(cmd[0] == \"setup\") {\r\n        assert_len(cmd, 1);\r\n        return new SetupCommand();\r\n    } else if(cmd[0] == \"test\") {\r\n        return test_timing();\r\n    } else if(cmd[0] == \"line\") {\r\n        assert_len(cmd, 3);\r\n        let nums = cmd.slice(1).map(Number);\r\n        return new LineCommand([nums[0], nums[1]]);\r\n    } else {\r\n        throw new Error(\"unknown \" + cmd.toString());\r\n    }\r\n}\r\n\r\nfunction position_function(t: number): number {\r\n    return 0.1*Math.cos(t*16);\r\n}\r\n\r\nfunction test_timing(): Command {\r\n    let cmds = []\r\n    let x = 0\r\n    let y = 0\r\n\r\n    for(let i = 0; i < 40; i++) {\r\n        let t = i / 4 * 2 * Math.PI;\r\n        let ex = Math.sin(t) * 30\r\n        let ey = Math.cos(t) * 30\r\n\r\n        cmds.push(new LineCommand([ex-x,ey-y]))\r\n        x = ex\r\n        y = ey\r\n    }\r\n    cmds.push(new LineCommand([-x,-y]))\r\n    return new MultiCommmand(cmds)\r\n}\r\n\r\nexport class UI {\r\n    ws: WebSocket;\r\n    go_button: HTMLButtonElement;\r\n    estop: HTMLButtonElement;\r\n    code: HTMLTextAreaElement;\r\n    status: HTMLDivElement;\r\n    onMicros: ((cmds: MicroCommand[])=>void) = null;\r\n    private waiting_promises: {n: number, res: ()=>void}[] = [];\r\n    session: ExecutionSession;\r\n    constructor(ws_url: string, go_id: string, estop_id: string, code_id: string, status_id: string){\r\n        this.session = new ExecutionSession();\r\n\r\n        this.code = document.getElementById(code_id) as HTMLTextAreaElement;\r\n        this.go_button = document.getElementById(go_id) as HTMLButtonElement;\r\n        this.estop = document.getElementById(estop_id) as HTMLButtonElement;\r\n        this.status = document.getElementById(status_id) as HTMLDivElement;\r\n\r\n        \r\n        this.estop.addEventListener(\"click\", ()=>{\r\n            let cmds = [new EStopCommand()];\r\n            this.execute(cmds);\r\n        });\r\n        this.go_button.addEventListener(\"click\", ()=>{\r\n            this.upload_code();\r\n        }) \r\n\r\n        if(ws_url) {\r\n            this.ws = new WebSocket(ws_url);\r\n            this.ws.onmessage = (ev=>{\r\n                let s = window.atob(ev.data);\r\n                let d = new Uint8Array(s.length);\r\n                for(let i = 0; i < s.length; i++){\r\n                    let v = s.charCodeAt(i);\r\n                    d[i] = v;\r\n                }\r\n                let u32 = new Uint32Array(d.buffer);\r\n                let status_index = u32[0];\r\n                this.new_status(status_index);\r\n            })\r\n            this.ws.onopen = ()=>{\r\n                console.log(\"WS opened\");\r\n                this.status.innerHTML = \"CONNECTED\";\r\n            }\r\n            this.ws.onclose = ()=>{\r\n                console.log(\"WS closed\");\r\n                this.status.innerHTML = \"DISCONNECTED\";\r\n            }\r\n            this.ws.onerror = e=>{\r\n                console.log(e);\r\n                this.status.innerHTML = \"ERROR\";\r\n            }\r\n        }  \r\n    }\r\n\r\n    private new_status(status_index: number) {\r\n        this.status.innerHTML = status_index+\"\";\r\n        this.waiting_promises = this.waiting_promises.filter(x=>{\r\n            let {n,res} = x;\r\n            if(n == status_index) {\r\n                res();\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        })\r\n    }\r\n\r\n    execute(cmds: Command[]) {\r\n        let micros = this.session.compile_commands(cmds, 0);\r\n        let binary = this.session.serialize_micros(micros);\r\n        if(this.onMicros) this.onMicros(micros);\r\n        if(this.ws) this.ws.send(binary);\r\n    }\r\n\r\n    upload_code() {\r\n        const code = this.code.value;\r\n        const lines = code.split('\\n');\r\n        const cmds = lines\r\n                        .map(l=>l.toLowerCase())\r\n                        .map(l=>l.split(/\\s/).filter(x=>x))\r\n                        .filter(x=>x.length);\r\n\r\n        let commands = [];\r\n        for(const cmd of cmds) {\r\n            commands.push(parse_command(cmd));\r\n        }\r\n\r\n        this.execute(commands);\r\n    }\r\n\r\n    async wait_for_status(status: number): Promise<void>{\r\n        return new Promise((res,rej)=>{\r\n            this.waiting_promises.push({n:status,res:res})\r\n        })\r\n    }\r\n}", "import { DelayCommand, ExecutionSession, StartCommand, StopCommand } from \"./session\";\r\nimport { UI } from \"./ui\";\r\n\r\nconst ui = new UI(\"ws://192.168.4.124/ws\", \"go_button0\", \"estop0\", \"code_input0\", \"status0\");\r\n\r\n// const live_ports: SerialPort[] = [];\r\n// let print_buff = \"\";\r\n\r\n// const SerialOut = new WritableStream<Uint8Array>({\r\n//     start(controller) { console.log(controller)},\r\n//     write(chunk, controller) { \r\n//         let text = new TextDecoder().decode(chunk);\r\n//         print_buff += text;\r\n//         if(print_buff.endsWith(\"\\n\")) {\r\n//             console.log(print_buff);\r\n//             print_buff = \"\";\r\n//         }\r\n//     },\r\n//     abort(reason) {console.log(reason)},\r\n// })\r\n\r\n// navigator.serial.getPorts().then((ports) => {\r\n//     console.log(ports);\r\n//     ports.forEach(register_port);\r\n// });\r\n\r\n// async function delay(millis: number) {\r\n//     return new Promise((res,rej)=>{\r\n//         setTimeout(res,millis)\r\n//     })\r\n// }\r\n\r\n// async function register_port(port: SerialPort){\r\n//     await port.open({baudRate:460800,bufferSize:1<<22});\r\n//     port.readable.pipeTo(SerialOut);\r\n//     await delay(200);\r\n//     live_ports.push(port);\r\n// }\r\n\r\n// async function write_port(port: SerialPort, msg: Uint8Array) {\r\n//     let writer = port.writable.getWriter();\r\n//     await writer.ready;\r\n//     console.log(writer.desiredSize);\r\n//     console.time(\"send\");\r\n//     for(let i = 0; i < 100; i++){\r\n//         writer.desiredSize\r\n//         await writer.write(new Uint8Array(20));\r\n//     }\r\n//     console.timeEnd(\"send\");\r\n\r\n//     writer.releaseLock();\r\n// }\r\n\r\n\r\n// document.getElementById(\"run\").addEventListener(\"click\", ()=>{\r\n//     // let micros = session.compile_commands(new Array(100).fill(new StopCommand()),1);\r\n//     // let binary = session.serialize_micros(micros);\r\n//     let binary = new Uint8Array(500);\r\n//     // console.log(binary)\r\n//     live_ports.forEach(async port=>{\r\n//         await write_port(port, binary);\r\n//     })\r\n// });\r\n\r\n// document.getElementById(\"connect\").addEventListener(\"click\", () => {\r\n//     const usbVendorId = 0x303A;\r\n//     navigator.serial\r\n//         .requestPort({ filters: [{ usbVendorId }] })\r\n//         .then((port) => {\r\n//             register_port(port)\r\n//         })\r\n//         .catch((e) => {\r\n//             console.log(e);\r\n//         });\r\n// });\r\n"],
  "mappings": "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",
  "names": ["pos"]
}
