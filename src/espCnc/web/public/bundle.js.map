{
  "version": 3,
  "sources": ["../src/session.ts", "../src/ui.ts", "../src/main.ts"],
  "sourcesContent": ["const CMD_TYPES = {\r\n    StopNow: 0,\r\n    StopAll: 1,\r\n    StartAll: 2,\r\n    Enable: 3,\r\n    SetMicrosteps: 4,\r\n    StealthChop: 11,\r\n    CoolStep: 12,\r\n    SetStatus: 13,\r\n    NewTimingReference: 14,\r\n    Timed: 15,\r\n}\r\n\r\nconst MAX_CHUNK = 4096;\r\n\r\nfunction concat(buffs: Uint8Array[]) {\r\n    const len = buffs.reduce((a,b)=>a + b.length, 0);\r\n    const together = new Uint8Array(len)\r\n    let head = 0;\r\n    for(const buff of buffs) {\r\n        together.set(buff, head);\r\n        head += buff.length;\r\n    }\r\n    return together;\r\n}\r\n\r\nexport class MicroCommand{\r\n    constructor(\r\n        public command_type: number,\r\n        public data?: Uint8Array,\r\n    ){}\r\n}\r\n\r\nexport type Command = {\r\n    encode(): MicroCommand[];\r\n}\r\n\r\nexport class EStopCommand implements Command {\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.StopNow)]\r\n    }\r\n}\r\n\r\nexport class StopCommand implements Command {\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.StopAll)];\r\n    }\r\n}\r\n\r\nexport class StartCommand implements Command {\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.StartAll)];\r\n    }\r\n}\r\n\r\nexport class MicrostepsCommand implements Command {\r\n    constructor(public microsteps: [number,number,number,number]){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.SetMicrosteps, new Uint8Array(new Uint16Array(this.microsteps).buffer))];\r\n    }\r\n}\r\n\r\nexport class StealthChopCommand implements Command {\r\n    constructor(public enable: [number,number,number,number]){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.StealthChop, new Uint8Array(this.enable))];\r\n    }\r\n}\r\n\r\nexport class CoolStepCommand implements Command {\r\n    constructor(public enable: [number,number,number,number]){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.CoolStep, new Uint8Array(this.enable))];\r\n    }\r\n}\r\n\r\nexport class EnableCommand implements Command {\r\n    constructor(public enable: [number,number,number,number]){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.Enable, new Uint8Array(this.enable))];\r\n    }\r\n}\r\n\r\nclass NewTimingReferenceCommand implements Command {\r\n    constructor(){}\r\n    encode(): MicroCommand[] {\r\n        return [new MicroCommand(CMD_TYPES.NewTimingReference)];\r\n    }\r\n}\r\n\r\nclass ContinuousTimedSequenceCommand implements Command {\r\n    constructor(public sequence: Uint16Array){\r\n        if(sequence.length > MAX_CHUNK) throw new Error(\"Too big chunk\");\r\n    }\r\n    encode(): MicroCommand[] {\r\n        console.log(this.sequence);\r\n        let buff = new Uint8Array(this.sequence.byteLength + 4);\r\n        let u32 = new Uint32Array(buff.buffer);\r\n        u32[0] = this.sequence.length;\r\n        buff.set(new Uint8Array(this.sequence.buffer, this.sequence.byteOffset, this.sequence.byteLength), 4);\r\n\r\n        return [new MicroCommand(CMD_TYPES.Timed, buff)];\r\n    }\r\n}\r\n\r\nexport class TimedMoveCommand implements Command {\r\n    constructor(public step_sequence: Uint8Array) {}\r\n    private encode_timings(): Uint16Array {\r\n        let last_cmd_index = 0;\r\n        let timing_commands = [];\r\n        for(let i = 0; i < this.step_sequence.length; i++) {\r\n            if(this.step_sequence[i] != 0) {\r\n                timing_commands.push((i - last_cmd_index) | (this.step_sequence[i] << 8));\r\n                last_cmd_index = i;\r\n            }\r\n            if(i - last_cmd_index == 256) {\r\n                timing_commands.push((i - last_cmd_index) | 0x00);\r\n                last_cmd_index = i;\r\n            }   \r\n        }\r\n        timing_commands.push((this.step_sequence.length - last_cmd_index))\r\n        return new Uint16Array(timing_commands);\r\n    }\r\n    encode(): MicroCommand[] {\r\n        let commands = this.encode_timings();\r\n        let parts = [new NewTimingReferenceCommand()];\r\n\r\n        let chunk_ct = Math.ceil(commands.length / MAX_CHUNK);\r\n        for(let i = 0; i < chunk_ct; i++) {\r\n            let chunk = commands.subarray(i * MAX_CHUNK, (i+1)*MAX_CHUNK);\r\n            parts.push(new ContinuousTimedSequenceCommand(chunk))\r\n        }\r\n\r\n        console.log(parts);\r\n\r\n        return new MultiCommmand(parts).encode()\r\n    }\r\n}\r\n\r\nclass MultiCommmand implements Command {\r\n    constructor(public commands: Command[]){}\r\n    encode(): MicroCommand[] {\r\n        return this.commands.flatMap(cmd=>cmd.encode());\r\n    }\r\n}\r\n\r\nexport class SetupCommand implements Command {\r\n    encode(): MicroCommand[] {\r\n        return new MultiCommmand([\r\n            new StartCommand(),\r\n            new MicrostepsCommand([256, 256, 256, 256]),\r\n            new StealthChopCommand([1,1,1,1]),\r\n            new CoolStepCommand([1,1,1,1]),\r\n            new EnableCommand([1,1,1,1]),\r\n        ]).encode()\r\n    }\r\n}\r\n\r\nexport class ExecutionSession {\r\n    private cmd_index: number = 0;\r\n    constructor(private ws: WebSocket){}\r\n    private build_execution(commands: Command[], base_index: number): Uint8Array {\r\n        let chunks = [];\r\n        let index = base_index;\r\n        for(const cmd of commands) {\r\n            let micros = cmd.encode();\r\n            for(const micro of micros) {\r\n                let chunk = new Uint8Array(4 + (micro.data?.length | 0));\r\n                let u16 = new Uint16Array(chunk.buffer);\r\n                u16[0] = micro.command_type;\r\n                u16[1] = index;\r\n                if(micro.data){\r\n                    chunk.set(micro.data, 4);\r\n                }\r\n                chunks.push(chunk);\r\n            }\r\n            index ++;\r\n        }\r\n\r\n        return concat(chunks);\r\n    }\r\n    execute(commands: Command[]) {\r\n        const binary = this.build_execution(commands, this.cmd_index);\r\n        this.cmd_index += commands.length;\r\n        console.log(binary);\r\n        this.ws.send(binary);\r\n    }\r\n}", "import { Command, CoolStepCommand, EnableCommand, EStopCommand, ExecutionSession, MicrostepsCommand, SetupCommand, StartCommand, StealthChopCommand, StopCommand, TimedMoveCommand } from \"./session\";\r\n\r\n\r\nfunction assert_len<T>(arr: Array<T>, len: number) {\r\n    if(arr.length != len) throw new Error(`Bad length (${arr.length} != ${len})`);\r\n}\r\n\r\nfunction parse_command(cmd: string[]) : Command {\r\n    if(cmd[0] == \"start\") {\r\n        assert_len(cmd, 1);\r\n        return new StartCommand();\r\n    } else if(cmd[0] == \"stop\") {\r\n        assert_len(cmd, 1);\r\n        return new StopCommand();\r\n    } else if(cmd[0] == \"enable\") {\r\n        assert_len(cmd, 5);\r\n        let nums = cmd.slice(1).map(Number)\r\n        return new EnableCommand([nums[0], nums[1], nums[2], nums[3]]);\r\n    } else if(cmd[0] == \"micro\" || cmd[0] == \"microsteps\") {\r\n        assert_len(cmd, 5);\r\n        let nums = cmd.slice(1).map(Number)\r\n        return new MicrostepsCommand([nums[0], nums[1], nums[2], nums[3]]);\r\n    } else if(cmd[0] == \"stealth\") {\r\n        assert_len(cmd, 5);\r\n        let nums = cmd.slice(1).map(Number)\r\n        return new StealthChopCommand([nums[0], nums[1], nums[2], nums[3]]);\r\n    } else if(cmd[0] == \"cool\") {\r\n        assert_len(cmd, 5);\r\n        let nums = cmd.slice(1).map(Number)\r\n        return new CoolStepCommand([nums[0], nums[1], nums[2], nums[3]]);\r\n    } else if(cmd[0] == \"setup\") {\r\n        assert_len(cmd, 1);\r\n        return new SetupCommand();\r\n    } else if(cmd[0] == \"test\") {\r\n        return test_timing();\r\n    } else {\r\n        throw new Error(\"unknown \" + cmd.toString());\r\n    }\r\n}\r\n\r\nfunction test_timing(): Command {\r\n    let ct = 1000000;\r\n    let steps = new Uint8Array(ct);\r\n    for(let i = 0; i < ct; i++) {\r\n        let t1 = i / ct * 2 * Math.PI;\r\n        let t0 = (i-1) / ct * 2 * Math.PI;\r\n        let s1 = Math.floor(Math.cos(t1) * 256 * 50);\r\n        let s2 = Math.floor(Math.cos(t0) * 256 * 50);\r\n        if(s1 > s2) {\r\n            steps[i] = 0x04;\r\n        }\r\n        if(s1 < s2) {\r\n            steps[i] = 0x44;\r\n        }\r\n    }\r\n    return new TimedMoveCommand(steps);\r\n}\r\n\r\nexport class UI {\r\n    ws: WebSocket;\r\n    go_button: HTMLButtonElement;\r\n    estop: HTMLButtonElement;\r\n    code: HTMLTextAreaElement;\r\n    status: HTMLDivElement;\r\n    private waiting_promises: {n: number, res: ()=>void}[] = [];\r\n    session: ExecutionSession;\r\n    constructor(ws_url: string, go_id: string, estop_id: string, code_id: string, status_id: string){\r\n        this.ws = new WebSocket(ws_url);\r\n        this.session = new ExecutionSession(this.ws);\r\n        this.ws.onmessage = (ev=>{\r\n            let s = window.atob(ev.data);\r\n            let d = new Uint8Array(s.length);\r\n            for(let i = 0; i < s.length; i++){\r\n                let v = s.charCodeAt(i);\r\n                d[i] = v;\r\n            }\r\n            let u32 = new Uint32Array(d.buffer);\r\n            let status_index = u32[0];\r\n            this.new_status(status_index);\r\n        })\r\n        this.code = document.getElementById(code_id) as HTMLTextAreaElement;\r\n        this.go_button = document.getElementById(go_id) as HTMLButtonElement;\r\n        this.estop = document.getElementById(estop_id) as HTMLButtonElement;\r\n        this.status = document.getElementById(status_id) as HTMLDivElement;\r\n\r\n        this.ws.onopen = ()=>{\r\n            console.log(\"WS opened\");\r\n            this.status.innerHTML = \"CONNECTED\";\r\n        }\r\n        this.ws.onclose = ()=>{\r\n            console.log(\"WS closed\");\r\n            this.status.innerHTML = \"DISCONNECTED\";\r\n        }\r\n        this.ws.onerror = e=>{\r\n            console.log(e);\r\n            this.status.innerHTML = \"ERROR\";\r\n        }\r\n        this.estop.addEventListener(\"click\", ()=>{\r\n            let cmds = [new EStopCommand()];\r\n            this.session.execute(cmds);\r\n        });\r\n        this.go_button.addEventListener(\"click\", ()=>{\r\n            this.upload_code()\r\n        })   \r\n    }\r\n\r\n    private new_status(status_index: number) {\r\n        this.status.innerHTML = status_index+\"\";\r\n        this.waiting_promises = this.waiting_promises.filter(x=>{\r\n            let {n,res} = x;\r\n            if(n == status_index) {\r\n                res();\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        })\r\n    }\r\n\r\n    upload_code() {\r\n        const code = this.code.value;\r\n        const lines = code.split('\\n');\r\n        const cmds = lines\r\n                        .map(l=>l.toLowerCase())\r\n                        .map(l=>l.split(/\\s/).filter(x=>x))\r\n                        .filter(x=>x.length);\r\n\r\n        let commands = [];\r\n        for(const cmd of cmds) {\r\n            commands.push(parse_command(cmd));\r\n        }\r\n        this.session.execute(commands);\r\n    }\r\n\r\n    async wait_for_status(status: number): Promise<void>{\r\n        return new Promise((res,rej)=>{\r\n            this.waiting_promises.push({n:status,res:res})\r\n        })\r\n    }\r\n}", "import { coord_to_angle } from \"./projection\";\r\nimport { UI } from \"./ui\";\r\n\r\nconst ui0 = new UI(\"ws://192.168.234.227/ws\", \"go_button0\", \"estop0\", \"code_input0\", \"status0\");\r\nconst ui1 = new UI(\"ws://192.168.4.117/ws\", \"go_button1\", \"estop1\", \"code_input1\", \"status1\");\r\nconst CANVAS_GO = document.getElementById(\"canvas_go\") as HTMLButtonElement;\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\ncanvas.width = canvas.clientWidth;\r\ncanvas.height = canvas.clientHeight\r\n"],
  "mappings": "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",
  "names": []
}
